/*let's imagine we have a deck of playing cards, and we want to sort them using the Insertion Sort algorithm. Each card has a numeric value assigned to it, like the rank of the card
in a standard deck (e.g., 2, 3, 4, ..., 10, J, Q, K, A).
Initial Unsorted Deck:
Let's say we have the following unsorted deck of cards:
5, 2, 9, 3, 7
Start Sorting:
we start with the second card (index 1) and compare it with the card to its left.
Current Deck: 5, 2, 9, 3, 7
We compare 2 with 5 and notice that 2 is smaller, so we swap them.
Updated Deck: 2, 5, 9, 3, 7

Next Iteration:
Now, move to the third card (index 2) and compare it with the cards to its left.
Current Deck: 2, 5, 9, 3, 7
9 is greater than 5, so no need to swap.
The deck remains unchanged: 2, 5, 9, 3, 7

Continue Sorting:
Move to the next card (index 3) and compare it with the cards to its left.
Current Deck: 2, 5, 9, 3, 7
3 is smaller than 9, so you swap them. Then, you compare 3 with 5 and swap again.
Updated Deck: 2, 3, 5, 9, 7

Next Iteration:
Continue this process for the remaining cards.
Current Deck: 2, 3, 5, 9, 7
7 is smaller than 9, so you swap them.
Updated Deck: 2, 3, 5, 7, 9

Sorted Deck:
After completing the iterations, the deck is sorted in ascending order: 2, 3, 5, 7, 9.
In this analogy, each iteration represents picking a card from the unsorted part of the deck and inserting it into its correct position among the already sorted cards. The comparison and
swapping process is akin to moving the selected card through the sorted part of the deck until it finds its correct place.*/


class practice{
   static void insertionSort(int arr[]) {
      int n = arr.length;
      for (int i = 1; i < n; i++) {
          int curr = arr[i];
          int prevIdx = i - 1;
          // Move elements greater than key to one position ahead of their current position
          while (prevIdx >= 0 && arr[prevIdx] > curr) {
              arr[prevIdx + 1] = arr[prevIdx];
              prevIdx--;
          }

          // Place the key in its correct position
          arr[prevIdx + 1] = curr;
      }
  }

   static void printArray(int arr[]) {
      int n = arr.length;
      for (int i = 0; i < n; i++) {
          System.out.print(arr[i] + " ");
      }
      System.out.println();
   }

  public static void main(String args[]) {
      int arr[] = {64, 25, 12, 22, 11};
      System.out.println("Original array:");
      printArray(arr);

      insertionSort(arr);
      System.out.println("Sorted array:");
      printArray(arr);
  }
}
