//This is brute force approach for finding 3 sum.
//we do not need duplicates values for that i used set here and before that we gonna sort the list when we storing the values.
//Approach---1(Brute Force)  Time Complexity:O(N^3) Space Complexity:O(N)
public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        Set<ArrayList<Integer>> set = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                for(int k=j+1;k<nums.length;k++){
                    if(nums[i]+nums[j]+nums[k]==0){
                        ArrayList<Integer> al = new ArrayList<>();
                        al.add(nums[i]);
                        al.add(nums[j]);
                        al.add(nums[k]);
                        Collections.sort(al);
                        set.add(al);
                    }
                }
            }
        }

        for( ArrayList<Integer> list:set){
            ans.add(list);
        }
        return ans;
    }
//Approach---2  Time Complexity:O(N^2) Space Complexity:O(N)
public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        Set<ArrayList<Integer>> set = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            Set<Integer> temp = new HashSet<>();
            for(int j=i+1;j<nums.length;j++){
                int third=-(nums[i]+nums[j]);
                if(temp.contains(third)){
                    ArrayList<Integer> al = new ArrayList<>();
                    al.add(nums[i]);
                    al.add(nums[j]);
                    al.add(third);
                    Collections.sort(al);
                    set.add(al); 
                }
                temp.add(nums[j]);
            }
        }

        for( ArrayList<Integer> list:set){
            ans.add(list);
        }
        return ans;
    }
//Approch---3  Time Complexity:O(N^2) Space Complexity:O(1)
 public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int j=i+1;
            int k=nums.length-1;
            while(j<k){
               if(nums[i]+nums[j]+nums[k]==0){
                   ArrayList<Integer> al = new ArrayList<>();
                   al.add(nums[i]);
                   al.add(nums[j]);
                   al.add(nums[k]);
                   ans.add(al);
                   j++;
                   k--;
                   while(j<k && nums[j]==nums[j-1]){
                       j++;
                   }
                  while(j<k && nums[k]==nums[k+1]){
                       k--;
                   }
               }
               else if(nums[i]+nums[j]+nums[k]>0){
                   k--;
               }
               else{
                   j++;
               }
            }
        }
        return ans;
    }
