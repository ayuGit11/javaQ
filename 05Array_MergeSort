/* In mergeSort we are using divide and conquer technique where we are first first mid and then divide the array into 2 parts and we dividing it till we get individual items in an array and then we are going
to merge array . While merging we using a temp[] of size end-st+1 and start merging two halves by compairing it and in sorted fashion. */


class MergeSort{
    public static void merge(int arr[],int st,int mid,int end){
        int temp[]=new int[end-st+1];
        int i=st;
        int j=mid+1;
        int k=0;
        while(i<=mid && j<=end){
            if(arr[i]<arr[j]){
                temp[k]=arr[i];
                i++;
            }
            else{
                temp[k]=arr[j];
                j++;
            }
            k++;
        }
        while(i<=mid){
            temp[k]=arr[i];
            i++;
            k++;
        }
        while(j<=end){
            temp[k]=arr[j];
            j++;
            k++;
        }
        for(k=0,i=st;k<temp.length;k++,i++){
            arr[i]=temp[k];
        }
    }
    public static void mergeSort(int arr[],int st,int end){
        if(st>=end){
             return;
        }
        int mid=st+(end-st)/2;
        mergeSort(arr,st,mid);
        mergeSort(arr,mid+1,end);
        merge(arr,st,mid,end);
    }
    public static void main(String args[]){
        int arr[]={8,2,5,1,7};
        mergeSort(arr,0,arr.length-1);
        for(int i=0;i<arr.length;i++){
            System.out.print(arr[i]+" ");
        }System.out.println();
    }
}
