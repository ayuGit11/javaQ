//In this coding we are given with string and k and we have to find maximum length of substring that can be consist of only same character with the replacement of k letters from substring
/*We iterate each character one by one & add into map & increase the frequency by one
- We also maintain maxFrequency for any letter
- We update maxLength as end - start + 1
- Now at every iteration, we check if end - start + 1 - maxFrequency is greater than k, then we need to remove it from map so we decrease the frequency by 1
- At last, we return maxLength

Time Complexity: O(n), where n is number of characters in String 
Space Complexity: O(1) */

import java.util.*;
class practice {
    public static int helper(String s1,int k){
        if(s1.length()==0 || k>s1.length() || k<=0){
            return -1;
        }
        HashMap<Character,Integer> hm = new HashMap<>();
        int st=0,maxFreq=0;
        int maxLength=0;
        for(int i=0;i<s1.length();i++){
            char ch=s1.charAt(i);
            hm.put(ch,hm.getOrDefault(ch,0)+1);
            maxFreq=Math.max(maxFreq,hm.get(ch));
            if(i-st+1-maxFreq>k){
                char c = s1.charAt(st);
                hm.put(c,hm.get(c)-1);
                st++;
            }
            maxLength=Math.max(i-st+1,maxLength);
        }
        return maxLength;
    }
    public static void main(String[] args) {
        String s1="daabcabaabe";
        System.out.println(helper(s1,2));
        
    }
}
