//given an array we need to find the length of the longest subsequence such that products of the elements in that subsequence divided by the length of subsequence is maximized.
//means ((product of all a[i](such that i=1 to m)) / m) where m is the length of that subsequence , we need maximize this given equations
// for p/m we have two cases:
   1) if we get element 1 i.e a[i]=1 then m increase i.e m=m+1 and p=p*1 i.e equal to p so p/m+1 is eventually decreases the value so we do not consider for a[i]=1;
   2) if we get element greater than 1 . let say 2 then p/m=2p/m+1 i.e greater than p/m so for that we will take this case.
   
//Solution
class practice {
    public static int longestBeautifulSubsequence(int N, int arr[]) {
        int ans=0;
        for(int x:arr){
            if(x>1){
                ans++;
            }
        }
        if(ans==0){
            return 1;
        }
        return ans;
    }

    public static void main(String[] args) {
        int N = 6;
        int arr[] = {1,4,6,2};
        int result = longestBeautifulSubsequence(N, arr);
        System.out.println("Length of the longest subarray: " + result);
    }
}
