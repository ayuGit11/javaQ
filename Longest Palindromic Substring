//by using dp I sloved this question 
public String longestPalindrome(String s){
        int n=s.length();
        int dp[][]=new int[n][n];
        int maxL=1;
       //for len=1
        for(int i=0;i<n;i++){
           dp[i][i]=1;
        }
        //for len=2
        int start = 0;
        for (int i = 0; i < n - 1;i++) {
            if (s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = 1;
                start = i;
                maxL = 2;
            }
        }
        //for len=3 and greater
        for(int len=3;len<=n;len++){
            for(int i=0;i<n-len+1;i++){
               int j=i+len-1;
               if(dp[i+1][j-1]==1 && s.charAt(i)==s.charAt(j)){
                   dp[i][j]=1;
                   if(len>maxL){
                     start=i;
                     maxL=len;
                   }
               }
            }
        }
        int end=start+maxL-1;
        return s.substring(start,end+1);
    }
